from aiogram import Bot, types

from aiogram.dispatcher import Dispatcher

from aiogram.utils import executor

from aiogram import types

from aiogram.dispatcher.filters import Text

from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.dispatcher import FSMContext

from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import TOKEN, ADMIN_ID

bot = Bot(token=TOKEN)

dp = Dispatcher(bot,storage=MemoryStorage())

errormsg=["üö´–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø—Ä–∏–≤–∞—Ç–µ."]

class Mydialog(StatesGroup):

    otvet = State()

@dp.message_handler(commands=['start'])

async def process_start_command(message: types.Message):

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    button_1 = types.KeyboardButton(text="üîó–ü—Ä–∏–≤—è–∑–∞—Ç—å")

    keyboard.add(button_1)

    button_2 = "‚õì–û—Ç–≤—è–∑–∞—Ç—å"

    keyboard.add(button_2)

    await bot.send_message(message.from_user.id, f"üåü–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–π HWID –≤ —á–∏—Ç–µ Slider\nüÜî –¢–≤–æ–π –∞–π–¥–∏: {message.from_user.id}", reply_markup=keyboard)

@dp.message_handler(Text(equals="üîó–ü—Ä–∏–≤—è–∑–∞—Ç—å"))

async def with_puree(message: types.Message):

    if message.from_user.username==None:

        await bot.send_message(message.from_user.id, "üö´–£ –≤–∞—Å –Ω–µ—Ç—É –Ω–∏–∫–Ω–µ–π–º–∞!")

    else:

        user_channel_status = await bot.get_chat_member(chat_id='1001799340034', user_id=message.from_user.id)

        if user_channel_status["status"] != 'left':

            await message.reply("‚úÖ–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å —á—É—Ç—å.")

            await bot.send_message(message.from_user.id, "–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É HWID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –∫–ª–∏–µ–Ω—Ç–∞ —Å—Ç–∞–Ω–¥–æ—Ñ—Ñ 2.")

            await Mydialog.otvet.set()

        else:

            await bot.send_message(message.from_user.id, errormsg[0])

@dp.message_handler(state=Mydialog.otvet)

async def process_message(message: types.Message, state: FSMContext):

    async with state.proxy() as data:

        data['text'] = message.text

        user_message = data['text']

        await bot.send_message(message.from_user.id, '‚úÖ–ì–æ—Ç–æ–≤–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.')

        buttons = [

            types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å —é–∑–µ—Ä–æ–º.", url=f"tg://resolve?domain={message.from_user.username}")

        ]

        keyboard = types.InlineKeyboardMarkup(row_width=1)

        keyboard.add(*buttons)

        await bot.send_message(ADMIN_ID, f'\nüñ•{user_message}:{message.from_user.id}\n\nüëç–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n', reply_markup=keyboard)

        

    await state.finish()

@dp.message_handler(lambda message: message.text == "‚õì–û—Ç–≤—è–∑–∞—Ç—å")

async def without_puree(message: types.Message):

    if message.from_user.username==None:

        await bot.send_message(message.from_user.id, "üö´–£ –≤–∞—Å –Ω–µ—Ç—É –Ω–∏–∫–Ω–µ–π–º–∞!")

    else:

        user_channel_status = await bot.get_chat_member(chat_id='–∞–π–¥–∏ –ø—Ä–∏–≤–∞—Ç–∫–∏', user_id=message.from_user.id)

        if user_channel_status["status"] != 'left':

            buttons = [

            types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å —é–∑–µ—Ä–æ–º.", url=f"tg://resolve?domain={message.from_user.username}")

            ]

            keyboard = types.InlineKeyboardMarkup(row_width=1)

            keyboard.add(*buttons)

            await bot.send_message(ADMIN_ID, f'\nüñ•{message.from_user.id}\n\nüëç–î–µ–π—Å—Ç–≤–∏–µ: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤—è–∑–∫–∏\n', reply_markup=keyboard)

            await message.reply("‚úÖ–ì–æ—Ç–æ–≤–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤—è–∑–∫—É HWID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

        else:

            await bot.send_message(message.from_user.id, errormsg[0])

if __name__ == '__main__':

    executor.start_polling(dp)

